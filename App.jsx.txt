import { useEffect, useMemo, useState } from "react"

const LS_LISTINGS = "foodlink_listings_v1"
const LS_NGOS = "foodlink_ngos_v1"

// Simple NGO list (you can edit names/areas)
const DEFAULT_NGOS = [
  { id: "ngo1", name: "Hope Kitchen", area: "Kator" },
  { id: "ngo2", name: "Youth Relief", area: "Gudele" },
  { id: "ngo3", name: "St. Mary‚Äôs Center", area: "Munuki" },
]

// Handy helpers
const uid = () => Math.random().toString(36).slice(2, 9)
const now = () => new Date().toISOString()

export default function App() {
  const [tab, setTab] = useState("dashboard")
  const [ngos, setNgos] = useState(DEFAULT_NGOS)
  const [listings, setListings] = useState(() => {
    try {
      const raw = localStorage.getItem(LS_LISTINGS)
      if (raw) return JSON.parse(raw)
    } catch {}
    // Seed with two example posts
    return [
      {
        id: uid(),
        kind: "produce",            // "produce" | "donation"
        actor: "Farmer",
        itemName: "Maize",
        quantity: 10,
        unit: "kg",
        price: 0.5,                // $ per unit; 0 = free
        area: "Gudele",
        status: "Available",       // "Available" | "Claimed"
        createdAt: now(),
      },
      {
        id: uid(),
        kind: "donation",
        actor: "Restaurant",
        itemName: "Cooked Rice",
        quantity: 10,
        unit: "plates",
        price: 0,
        area: "Kator",
        status: "Available",
        createdAt: now(),
        assignedNgo: "Hope Kitchen",
      },
    ]
  })

  // Persist listings
  useEffect(() => {
    localStorage.setItem(LS_LISTINGS, JSON.stringify(listings))
  }, [listings])

  // Persist NGOs if you modify them later (not required for MVP)
  useEffect(() => {
    localStorage.setItem(LS_NGOS, JSON.stringify(ngos))
  }, [ngos])

  const stats = useMemo(() => {
    const totalProduceKg = listings
      .filter(l => l.kind === "produce" && l.unit.toLowerCase().includes("kg"))
      .reduce((s, l) => s + Number(l.quantity || 0), 0)
    const totalMeals = listings
      .filter(l => l.kind === "donation")
      .reduce((s, l) => s + Number(l.quantity || 0), 0)
    const totalAvailable = listings.filter(l => l.status === "Available").length
    const totalClaimed = listings.filter(l => l.status === "Claimed").length
    return { totalProduceKg, totalMeals, totalAvailable, totalClaimed }
  }, [listings])

  // Forms state
  const [farmerForm, setFarmerForm] = useState({
    itemName: "Maize",
    quantity: 10,
    unit: "kg",
    price: 0.5,
    area: "Gudele",
  })

  const [donorForm, setDonorForm] = useState({
    itemName: "Cooked Rice",
    quantity: 10,
    unit: "plates",
    area: "Kator",
  })

  const [filters, setFilters] = useState({
    q: "",
    kind: "all", // all | produce | donation
    area: "",
    status: "all" // all | Available | Claimed
  })

  const filteredListings = useMemo(() => {
    return listings
      .filter(l => (filters.kind === "all" ? true : l.kind === filters.kind))
      .filter(l => (filters.status === "all" ? true : l.status === filters.status))
      .filter(l => (filters.area ? l.area.toLowerCase().includes(filters.area.toLowerCase()) : true))
      .filter(l => {
        if (!filters.q) return true
        const t = `${l.itemName} ${l.actor} ${l.area}`.toLowerCase()
        return t.includes(filters.q.toLowerCase())
      })
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
  }, [listings, filters])

  // Assign NGO by area (simple match; if none, pick first)
  const assignNgo = (area) => {
    const exact = ngos.find(n => n.area.toLowerCase() === String(area).toLowerCase())
    return (exact || ngos[0])?.name
  }

  // Actions
  const addFarmerPost = (e) => {
    e.preventDefault()
    if (!farmerForm.itemName || !farmerForm.quantity || !farmerForm.unit || farmerForm.price === "") return
    const post = {
      id: uid(),
      kind: "produce",
      actor: "Farmer",
      itemName: farmerForm.itemName.trim(),
      quantity: Number(farmerForm.quantity),
      unit: farmerForm.unit.trim(),
      price: Number(farmerForm.price),
      area: farmerForm.area.trim(),
      status: "Available",
      createdAt: now(),
    }
    setListings([post, ...listings])
    alert("Farmer post added ‚úÖ")
  }

  const addDonationPost = (e) => {
    e.preventDefault()
    if (!donorForm.itemName || !donorForm.quantity || !donorForm.unit || !donorForm.area) return
    const ngoName = assignNgo(donorForm.area)
    const post = {
      id: uid(),
      kind: "donation",
      actor: "Restaurant", // or "Household"
      itemName: donorForm.itemName.trim(),
      quantity: Number(donorForm.quantity),
      unit: donorForm.unit.trim(),
      price: 0,
      area: donorForm.area.trim(),
      status: "Available",
      createdAt: now(),
      assignedNgo: ngoName,
    }
    setListings([post, ...listings])
    alert(`Donation added ‚úÖ Assigned NGO: ${ngoName}`)
  }

  const claimListing = (id, claimer = "Family/NGO") => {
    setListings(prev =>
      prev.map(l => (l.id === id ? { ...l, status: "Claimed", claimedBy: claimer, claimedAt: now() } : l))
    )
  }

  const removeListing = (id) => {
    setListings(prev => prev.filter(l => l.id !== id))
  }

  // UI parts
  return (
    <div className="min-h-screen">
      <header className="sticky top-0 z-10 bg-white/90 backdrop-blur border-b border-slate-200">
        <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
          <div className="flex items-center gap-2">
            <span className="text-2xl">üåæ</span>
            <h1 className="text-lg sm:text-2xl font-bold text-slate-800">FoodLink ‚Äî Ending Hunger Through Connection</h1>
          </div>
          <nav className="flex gap-2 text-sm">
            {[
              ["dashboard","Dashboard"],
              ["farmer","Farmer"],
              ["donor","Donor"],
              ["browse","Browse / Claim"],
            ].map(([key, label]) => (
              <button
                key={key}
                onClick={()=>setTab(key)}
                className={`px-3 py-2 rounded-full ${tab===key ? "bg-slate-900 text-white":"bg-slate-100 text-slate-700 hover:bg-slate-200"}`}
              >
                {label}
              </button>
            ))}
          </nav>
        </div>
      </header>

      <main className="max-w-6xl mx-auto px-4 py-6 space-y-6">
        {tab === "dashboard" && (
          <div className="grid gap-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
              <Stat label="Total Produce (kg)" value={stats.totalProduceKg.toFixed(1)} />
              <Stat label="Surplus Meals" value={stats.totalMeals} />
              <Stat label="Available Posts" value={stats.totalAvailable} />
              <Stat label="Claimed Posts" value={stats.totalClaimed} />
            </div>

            <div className="bg-white rounded-2xl shadow-sm border border-slate-200 p-4">
              <h2 className="text-lg font-semibold">How to Demo (2 minutes)</h2>
              <ol className="list-decimal pl-5 text-slate-600 mt-2 space-y-1">
                <li>Go to <b>Farmer</b> ‚Üí post produce (e.g., Maize 10kg @ $0.50/kg, area Gudele).</li>
                <li>Go to <b>Donor</b> ‚Üí post surplus (e.g., 10 plates Rice, area Kator) ‚Üí auto-assign NGO.</li>
                <li>Go to <b>Browse/Claim</b> ‚Üí filter by kind, claim items ‚Üí status becomes ‚ÄúClaimed‚Äù.</li>
              </ol>
              <p className="text-sm text-slate-500 mt-2">Data is saved in your browser (localStorage). No backend needed for the hackathon demo.</p>
            </div>
          </div>
        )}

        {tab === "farmer" && (
          <div className="grid gap-4">
            <Section title="Post Produce (Farmer)" subtitle="Farm-to-market direct sales">
              <form onSubmit={addFarmerPost} className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <Input label="Product" value={farmerForm.itemName} onChange={v=>setFarmerForm({...farmerForm, itemName:v})} />
                <Input label="Quantity" type="number" value={farmerForm.quantity} onChange={v=>setFarmerForm({...farmerForm, quantity:v})} />
                <Input label="Unit" value={farmerForm.unit} onChange={v=>setFarmerForm({...farmerForm, unit:v})} />
                <Input label="Price per unit ($)" type="number" step="0.01" value={farmerForm.price} onChange={v=>setFarmerForm({...farmerForm, price:v})} />
                <Input label="Area" value={farmerForm.area} onChange={v=>setFarmerForm({...farmerForm, area:v})} />
                <div className="sm:col-span-2">
                  <button className="px-4 py-2 rounded-lg bg-slate-900 text-white">Post Listing</button>
                </div>
              </form>
            </Section>

            <Section title="Recent Farmer Posts">
              <List
                data={listings.filter(l => l.kind === "produce")}
                onClaim={claimListing}
                onRemove={removeListing}
              />
            </Section>
          </div>
        )}

        {tab === "donor" && (
          <div className="grid gap-4">
            <Section title="Post Surplus (Restaurant/Household)" subtitle="Donations auto-assign to nearest NGO by area">
              <form onSubmit={addDonationPost} className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                <Input label="Item" value={donorForm.itemName} onChange={v=>setDonorForm({...donorForm, itemName:v})} />
                <Input label="Quantity" type="number" value={donorForm.quantity} onChange={v=>setDonorForm({...donorForm, quantity:v})} />
                <Input label="Unit" value={donorForm.unit} onChange={v=>setDonorForm({...donorForm, unit:v})} />
                <Input label="Area" value={donorForm.area} onChange={v=>setDonorForm({...donorForm, area:v})} />
                <div className="sm:col-span-2">
                  <button className="px-4 py-2 rounded-lg bg-slate-900 text-white">Post Donation</button>
                </div>
              </form>
            </Section>

            <Section title="Recent Donations">
              <List
                data={listings.filter(l => l.kind === "donation")}
                onClaim={claimListing}
                onRemove={removeListing}
              />
            </Section>
          </div>
        )}

        {tab === "browse" && (
          <div className="grid gap-4">
            <Section title="Browse & Claim" subtitle="Families & NGOs can claim items here">
              <div className="flex flex-wrap gap-2 mb-3">
                <input
                  placeholder="Search (product/area)"
                  className="border rounded-lg p-2 min-w-[220px]"
                  value={filters.q}
                  onChange={e=>setFilters({...filters, q:e.target.value})}
                />
                <select
                  className="border rounded-lg p-2"
                  value={filters.kind}
                  onChange={e=>setFilters({...filters, kind:e.target.value})}
                >
                  <option value="all">All</option>
                  <option value="produce">Produce</option>
                  <option value="donation">Donation</option>
                </select>
                <select
                  className="border rounded-lg p-2"
                  value={filters.status}
                  onChange={e=>setFilters({...filters, status:e.target.value})}
                >
                  <option value="all">All Status</option>
                  <option value="Available">Available</option>
                  <option value="Claimed">Claimed</option>
                </select>
                <input
                  placeholder="Filter by area (e.g., Gudele)"
                  className="border rounded-lg p-2 min-w-[220px]"
                  value={filters.area}
                  onChange={e=>setFilters({...filters, area:e.target.value})}
                />
              </div>

              <List
                data={filteredListings}
                onClaim={claimListing}
                onRemove={removeListing}
              />
            </Section>
          </div>
        )}
      </main>
    </div>
  )
}

// UI Helpers
function Section({ title, subtitle, children }) {
  return (
    <div className="bg-white rounded-2xl shadow-sm border border-slate-200 p-4">
      <h2 className="text-lg font-semibold">{title}</h2>
      {subtitle && <p className="text-slate-500 text-sm mt-1">{subtitle}</p>}
      <div className="mt-3">{children}</div>
    </div>
  )
}

function Stat({ label, value }) {
  return (
    <div className="bg-white rounded-2xl shadow-sm border border-slate-200 p-4">
      <div className="text-slate-500 text-sm">{label}</div>
      <div className="text-2xl font-bold">{value}</div>
    </div>
  )
}

function Input({ label, type="text", step, value, onChange }) {
  return (
    <label className="text-sm">
      {label}
      <input
        type={type}
        step={step}
        className="mt-1 w-full border rounded-lg p-2"
        value={value}
        onChange={e=>onChange(type==="number" ? Number(e.target.value) : e.target.value)}
      />
    </label>
  )
}

function List({ data, onClaim, onRemove }) {
  if (data.length === 0) return <div className="text-slate-500 text-sm">No items yet.</div>
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
      {data.map(item => (
        <div key={item.id} className="border rounded-xl p-3 bg-white flex flex-col gap-2">
          <div className="flex items-center justify-between">
            <div className="font-semibold">
              {item.actor} ‚Üí {item.itemName}
            </div>
            <span className={`text-xs px-2 py-1 rounded-full ${item.status==="Available" ? "bg-emerald-100 text-emerald-700":"bg-slate-200 text-slate-700"}`}>
              {item.status}
            </span>
          </div>
          <div className="text-sm text-slate-600">
            {item.quantity} {item.unit}
            {item.kind === "produce" ? ` ‚Ä¢ $${item.price}/${item.unit}` : " ‚Ä¢ Free"}
          </div>
          <div className="text-xs text-slate-500">Area: {item.area}</div>
          {item.kind === "donation" && (
            <div className="text-xs text-slate-500">
              Assigned NGO: <b>{item.assignedNgo || "Pending"}</b>
            </div>
          )}
          <div className="flex items-center gap-2 mt-2">
            {item.status === "Available" && (
              <button
                className="px-3 py-2 rounded-lg bg-slate-900 text-white text-sm"
                onClick={()=>onClaim(item.id)}
              >
                ü§ù Claim
              </button>
            )}
            <button
              className="px-3 py-2 rounded-lg bg-slate-100 text-sm"
              onClick={()=>onRemove(item.id)}
            >
              Remove
            </button>
          </div>
          <div className="text-[11px] text-slate-400 mt-1">
            Posted: {new Date(item.createdAt).toLocaleString()}
          </div>
        </div>
      ))}
    </div>
  )
}
